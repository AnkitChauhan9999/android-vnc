diff -w -urN kernel/Makefile kernel.jasta/Makefile
--- kernel/Makefile	2007-11-11 12:49:02.000000000 -0800
+++ kernel.jasta/Makefile	2007-12-21 22:10:24.000000000 -0800
@@ -516,8 +516,8 @@
 CFLAGS += $(call cc-option,-Wno-pointer-sign,)
 
 # Use --build-id when available.
-LDFLAGS_BUILD_ID = $(patsubst -Wl$(comma)%,%,\
-			      $(call ld-option, -Wl$(comma)--build-id,))
+#LDFLAGS_BUILD_ID = $(patsubst -Wl$(comma)%,%,\
+#			      $(call ld-option, -Wl$(comma)--build-id,))
 LDFLAGS_MODULE += $(LDFLAGS_BUILD_ID)
 LDFLAGS_vmlinux += $(LDFLAGS_BUILD_ID)
 
Binary files kernel/drivers/input/keyboard/.atkbd.c.swp and kernel.jasta/drivers/input/keyboard/.atkbd.c.swp differ
diff -w -urN kernel/drivers/input/keyboard/Kconfig kernel.jasta/drivers/input/keyboard/Kconfig
--- kernel/drivers/input/keyboard/Kconfig	2007-11-11 12:49:02.000000000 -0800
+++ kernel.jasta/drivers/input/keyboard/Kconfig	2007-12-29 14:22:55.000000000 -0800
@@ -258,4 +258,9 @@
 	help
 	  no help
 
+config KEYBOARD_KBDE
+	tristate "KBD emulation driver"
+	help
+	  no help
+
 endif
diff -w -urN kernel/drivers/input/keyboard/Makefile kernel.jasta/drivers/input/keyboard/Makefile
--- kernel/drivers/input/keyboard/Makefile	2007-11-11 12:49:02.000000000 -0800
+++ kernel.jasta/drivers/input/keyboard/Makefile	2007-12-29 14:25:42.000000000 -0800
@@ -22,3 +22,4 @@
 obj-$(CONFIG_KEYBOARD_AAED2000)		+= aaed2000_kbd.o
 obj-$(CONFIG_KEYBOARD_GPIO)		+= gpio_keys.o
 obj-$(CONFIG_KEYBOARD_GOLDFISH_EVENTS)	+= goldfish_events.o
+obj-$(CONFIG_KEYBOARD_KBDE)		+= kbde.o
diff -w -urN kernel/drivers/input/keyboard/kbde.c kernel.jasta/drivers/input/keyboard/kbde.c
--- kernel/drivers/input/keyboard/kbde.c	1969-12-31 16:00:00.000000000 -0800
+++ kernel.jasta/drivers/input/keyboard/kbde.c	2007-12-29 14:23:18.000000000 -0800
@@ -0,0 +1,161 @@
+/*
+     keyboard emulator project
+ 
+     Copyright (C) 1998-2007 Reznic Valery <valery_reznic@users.sourceforge.net>
+ 
+     This program is free software; you can redistribute it and/or modify
+     it under the terms of the GNU General Public License as published by
+     the Free Software Foundation; either version 2 of the License, or
+     (at your option) any later version.
+ 
+     This program is distributed in the hope that it will be useful,
+     but WITHOUT ANY WARRANTY; without even the implied warranty of
+     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+     GNU General Public License for more details.
+ 
+*/
+
+/*
+ * Modified to work on kernel 2.6 by Gunnar Teege 
+ * (gunnar.teege@unibw-muenchen.de)
+ * Successfully tested on SuSE Linux 9.1, Kernel 2.6.5.
+ */
+
+#ifdef MODVERSIONS
+	#include <linux/modversions.h>
+#endif
+
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/serio.h>
+#include <linux/input.h>
+
+#include <asm/uaccess.h>
+#define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))
+
+#define kbde_MAJOR 11 /* As define for the SPARC keyboard */
+static int major = kbde_MAJOR;
+
+MODULE_AUTHOR("Valery Reznic <valery_reznic@users.sourceforge.net>");
+MODULE_DESCRIPTION("Keyboard (i386) emulator");
+MODULE_LICENSE("GPL");
+module_param(major, int, 0);
+MODULE_PARM_DESC(major, "major number for kbde driver");
+
+/* We register this device as a serial bus driver to be able to 
+   feed the scancode to the keyboard driver which also handles the normal
+   keyboard. We identify as an i8042 XL which normally interfaces to the AT
+   keyboard driver. This should be made a module parameter, if kbde should be
+   used in combination with other physical keyboards as well. */
+
+/*
+ * This is called by serio_open when connecting to the keyboard driver.
+ * We need no additional actions here and return success.
+ */
+static int serio_kbde_open(struct serio *port)
+{
+	return 0;
+}
+
+/*
+ * This is called by serio_close when the keyboard driver disconnects.
+ * We need no actions here.
+ */
+static void serio_kbde_close(struct serio *port)
+{
+}
+
+static int kbde_open(struct inode *inode, struct file *file)
+{
+	//printk("kbde module has been opened\n");
+	return 0;
+}
+  
+static int kbde_release(struct inode *inode, struct file *file)
+{
+	//printk("kbde module has been closed\n");
+	return 0;
+}
+
+/* serio should be kmalloce'ed, or serio_unregister_port will segfault :( */
+static struct serio *kbde_port; 
+
+static ssize_t kbde_write(struct file *file, const char *buf, size_t length, loff_t *ppos)
+{
+	int err;
+	int retval = 0;
+	unsigned char scancode = 0;
+	//printk("kbde module write() called\n");
+
+	err = access_ok(VERIFY_READ, buf, length);
+	if (err == 0) return -EFAULT;
+
+	for (retval = 0; retval < length; retval++) {
+		get_user(scancode, (char*)buf++);
+		//printk("SYMBOL = %x\n", (unsigned int)scancode);
+
+		serio_interrupt(kbde_port, scancode, 0);
+	}
+	return retval;
+}
+
+static struct file_operations kbde_fops = { 
+	.owner	 = THIS_MODULE,
+	.write	 = kbde_write, 
+	.open	 = kbde_open, 
+	.release = kbde_release
+};
+
+static int __init kbde_init(void)
+{
+	if (register_chrdev(major, "kbde", &kbde_fops) ) {
+		printk("kbde: can't get major %d\n", major);
+		return(-EIO);
+	}
+
+	kbde_port = kmalloc(sizeof (struct serio), GFP_KERNEL);
+	if (kbde_port == NULL) return -ENOMEM;
+
+	/*
+ 	 * The port structure.
+ 	 * Important is the type. 
+	 * It will make the AT keyboard driver atkbd connect to this port
+ 	 * open and close must be valid function pointers. All other
+ 	 * entries can be set to arbitrary values. 
+ 	 *
+ 	 * atkbd.c use phys as following:
+ 	 * sprintf(atkbd->phys, "%s/input0", serio->phys)
+ 	 * Destination phys defined in the 'struct atkbd' as char[32].
+ 	 * So, our phys should be no longer then
+ 	 * 32 - strlen("/input0"), 
+ 	 * i.e no longer then 25, INCLUDE terminated 0.
+ 	 */
+	memset(kbde_port, 0, sizeof(struct serio));
+	kbde_port->open = serio_kbde_open;
+	kbde_port->close = serio_kbde_close;
+	strcpy(kbde_port->name , "Kbd Emulator Port");
+	strcpy(kbde_port->phys , "Keyboard Emulator");
+	kbde_port->id.type = SERIO_8042_XL;
+	kbde_port->id.proto = SERIO_ANY;
+	kbde_port->id.id    = SERIO_ANY;
+	kbde_port->id.extra = SERIO_ANY;
+	//kbde_port->dev.driver = NULL;
+
+	/* register this driver as a serial io port */
+	serio_register_port(kbde_port);
+
+	printk("kbde: loaded\n");
+
+	return 0;
+}
+
+static void __exit kbde_exit(void)
+{
+	unregister_chrdev(major, "kbde");
+	/* unregister this driver as serial io port */
+	serio_unregister_port(kbde_port);
+	printk("kbde: unloaded\n");
+}
+
+module_init(kbde_init);
+module_exit(kbde_exit);
